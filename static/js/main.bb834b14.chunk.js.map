{"version":3,"sources":["firebase.ts","UserProvider.tsx","SignIn.tsx","PlaySound.tsx","Message.tsx","Messages.tsx","SendMessage.tsx","SendSound.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/audio/拍手と歓声.mp3","assets/audio/mens-ou1.mp3","assets/audio/イエーイ.mp3","assets/audio/俺の話を聞け.mp3","assets/audio/いま何時？.mp3","assets/audio/ドラ.mp3","assets/audio/ガッツだぜ.mp3","assets/audio/残念.mp3"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","UserContext","React","createContext","undefined","useUser","useContext","HideOnScroll","props","children","trigger","useScrollTrigger","Slide","appear","direction","in","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","SignIn","user","classes","signedIn","Fragment","Avatar","alt","displayName","src","avatar","IconButton","edge","Button","variant","color","onClick","provider","auth","GoogleAuthProvider","signInWithRedirect","then","result","console","log","catch","error","CssBaseline","AppBar","position","Toolbar","Typography","className","Clap","require","Ou","Yeah","ListenToMe","WhatTime","Dora","Guts","Zannen","soundCommandLabelMap","clap","yeah","ou","dora","listenToMe","guts","whatTime","soundCommandModuleMap","zannen","extractSoundCommandFromString","str","regexp","RegExp","matched","match","soundCommand","Object","keys","findIndex","k","isSoundCommand","PlaySound","command","status","onFinishedPlaying","sound","extracted","soundCommandToModule","url","playStatus","small","width","height","large","isMyMessage","message","name","messageConverter","label","soundCommandToLabel","Message","messageObject","key","image","Grid","container","justify","alignItems","MessageString","styled","span","Messages","messages","length","messagesX","map","m","sendMessage","database","ref","push","created","ServerValue","TIMESTAMP","SendMessage","useState","typedMessage","setTypedMessage","autoComplete","TextField","value","onChange","event","target","disabled","placeholder","fullWidth","endIcon","SendSound","setSound","playing","setPlaying","delayTimer","setDelayTimer","ButtonGroup","aria-label","onMouseEnter","window","clearTimeout","timerId","setTimeout","onMouseLeave","App","setUser","setMessages","latestMessage","setLatestMessage","useEffect","onAuthStateChanged","warn","email","photoURL","latestCreated","limitToLast","once","snap","val","forEach","currentMessages","orderByChild","startAt","on","Provider","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.bb834b14.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/database'\nimport 'firebase/auth'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyA_6SN910Ry8czAxRR2FgcCmB9t4u8GY30',\n  authDomain: 'sound-chat-5875a.firebaseapp.com',\n  databaseURL: 'https://sound-chat-5875a.firebaseio.com',\n  projectId: 'sound-chat-5875a',\n  storageBucket: 'sound-chat-5875a.appspot.com',\n  messagingSenderId: '1052142353738',\n  appId: '1:1052142353738:web:0231122eeccb95832315b3',\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase\n","import React from 'react'\n\nexport type User = {\n  email: string | null\n  avatar: string | null\n  displayName: string | null\n}\n\nexport const UserContext = React.createContext<User | undefined>(undefined)\n\nexport const useUser = (): User | undefined => {\n  const context = React.useContext<User | undefined>(UserContext)\n  // if (context === undefined) {\n  //   throw new Error('useUserContext must be used within a UserProvider')\n  // }\n  return context\n}\n","import React from 'react'\nimport firebase from './firebase'\nimport {\n  Avatar,\n  Button,\n  AppBar,\n  Toolbar,\n  Slide,\n  CssBaseline,\n  IconButton,\n  Typography,\n} from '@material-ui/core'\nimport { useUser } from './UserProvider'\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\ninterface Props {\n  children: React.ReactElement\n}\nfunction HideOnScroll(props: Props) {\n  const { children } = props\n  const trigger = useScrollTrigger()\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  )\n}\n\nconst onClick = () => {\n  const provider = new firebase.auth.GoogleAuthProvider()\n  firebase\n    .auth()\n    .signInWithRedirect(provider)\n    .then(function (result) {\n      // const token = result.credential.accessToken\n      // const user = result.user\n      console.log(result)\n    })\n    .catch(function (error) {\n      // const errorCode = error.code\n      // const errorMessage = error.message\n      // const email = error.email\n      // const credential = error.credential\n      console.error(error)\n    })\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n)\n\nexport const SignIn = (): JSX.Element => {\n  const user = useUser()\n  const classes = useStyles()\n  const signedIn = (\n    <React.Fragment>\n      <Avatar\n        alt={user?.displayName || undefined}\n        src={user?.avatar || undefined}\n      />\n      <IconButton edge=\"end\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            onClick()\n          }}\n        >\n          Login\n        </Button>\n      </IconButton>\n    </React.Fragment>\n  )\n\n  // TODO: Sign out\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <HideOnScroll>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Sound Chat\n            </Typography>\n            {/* {user ? signedIn : login} */ signedIn}\n          </Toolbar>\n        </AppBar>\n      </HideOnScroll>\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport Sound, { ReactSoundProps } from 'react-sound'\n/* eslint @typescript-eslint/no-var-requires: 0 */\nconst Clap = require('./assets/audio/拍手と歓声.mp3')\nconst Ou = require('./assets/audio/mens-ou1.mp3')\nconst Yeah = require('./assets/audio/イエーイ.mp3')\nconst ListenToMe = require('./assets/audio/俺の話を聞け.mp3')\nconst WhatTime = require('./assets/audio/いま何時？.mp3')\nconst Dora = require('./assets/audio/ドラ.mp3')\nconst Guts = require('./assets/audio/ガッツだぜ.mp3')\nconst Zannen = require('./assets/audio/残念.mp3')\n\nexport type SoundCommandKey =\n  | 'clap'\n  | 'yeah'\n  | 'listenToMe'\n  | 'ou'\n  | 'whatTime'\n  | 'dora'\n  | 'guts'\n  | 'zannen'\n\nexport const soundCommandLabelMap: { [key in SoundCommandKey]?: string } = {\n  clap: '拍手',\n  yeah: 'イエーイ',\n  ou: 'オゥ!',\n  dora: 'ドラ',\n  listenToMe: '俺の話を聞け',\n  guts: 'ガッツだぜ',\n  whatTime: '今何時',\n}\nconst soundCommandModuleMap: { [K in SoundCommandKey]?: any } = {\n  clap: Clap,\n  yeah: Yeah,\n  ou: Ou,\n  listenToMe: ListenToMe,\n  whatTime: WhatTime,\n  dora: Dora,\n  guts: Guts,\n  zannen: Zannen,\n}\n\nexport const isSoundCommand = (str: string): str is SoundCommandKey => {\n  return Object.keys(soundCommandModuleMap).findIndex((k) => k === str) !== -1\n}\n\nconst extractSoundCommandFromString = (str: string) => {\n  const regexp = new RegExp(/^\\[\\[(\\w+)\\]\\]$/)\n  const matched = str.match(regexp)\n  if (!matched) return null\n  const soundCommand = matched[1]\n  return isSoundCommand(soundCommand) ? soundCommand : null\n}\n\nexport const soundCommandToLabel = (str: string) => {\n  const extracted = extractSoundCommandFromString(str)\n  return extracted ? soundCommandLabelMap[extracted] : null\n}\n\nexport const soundCommandToModule = (\n  str: string | undefined\n): string | null => {\n  if (str === undefined) return null\n  const extracted = extractSoundCommandFromString(str)\n  return extracted ? soundCommandModuleMap[extracted] : null\n}\n\nexport const PlaySound = (props: {\n  command?: string\n  status?: ReactSoundProps['playStatus']\n  onFinishedPlaying?: () => void\n}) => {\n  const { command, status, onFinishedPlaying } = props\n  const sound = soundCommandToModule(command)\n  const defaultOnFinished = () => {\n    const a = 1\n  }\n  return (\n    <Sound\n      url={sound || ''}\n      playStatus={status || 'PLAYING'}\n      onFinishedPlaying={onFinishedPlaying || defaultOnFinished}\n    ></Sound>\n  )\n}\n","import React from 'react'\nimport { useUser, User } from './UserProvider'\nimport { Avatar, Grid } from '@material-ui/core'\nimport styled from 'styled-components'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { soundCommandToLabel } from './PlaySound'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    small: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    large: {\n      width: theme.spacing(7),\n      height: theme.spacing(7),\n    },\n  })\n)\n\nconst isMyMessage = (message: TMessage, user: User): boolean => {\n  return message.name === user.displayName\n}\n\nconst messageConverter = (message: string): string => {\n  const label = soundCommandToLabel(message)\n  return label ? `🎶 ${label}` : message\n}\n\nexport const Message = (props: { messageObject: TMessage }): JSX.Element => {\n  const user = useUser()\n  const classes = useStyles()\n  const { key, image, message, name } = props.messageObject\n\n  return (\n    <Grid\n      container\n      justify={\n        user && isMyMessage(props.messageObject, user)\n          ? 'flex-end'\n          : 'flex-start'\n      }\n      direction=\"row\"\n      alignItems=\"center\"\n    >\n      <Avatar\n        alt={name || undefined}\n        src={image || undefined}\n        className={classes.small}\n      />\n      <MessageString key={key}>{messageConverter(message)}</MessageString>\n    </Grid>\n  )\n}\n\nconst MessageString = styled.span`\n  margin: 10px;\n`\n\nexport type TMessage = {\n  key?: string\n  name?: string\n  image?: string\n  message: string\n  created: number\n}\n","import React from 'react'\nimport { TMessage, Message } from './Message'\n\nexport const Messages = (props: { messages: TMessage[] }): JSX.Element => {\n  const { messages } = props\n  if (messages.length === 0) {\n    return <div />\n  }\n\n  const messagesX = messages.map((m) => {\n    return <Message key={m.key} messageObject={m} />\n  })\n  return <div>{messagesX}</div>\n}\n","import React from 'react'\nimport { TextField, Button } from '@material-ui/core'\nimport SendIcon from '@material-ui/icons/Send'\nimport { useUser } from './UserProvider'\nimport { TMessage } from './Message'\nimport firebase from './firebase'\n\nexport const sendMessage = (message: Omit<TMessage, 'created'>): void => {\n  firebase\n    .database()\n    .ref('message')\n    .push({\n      ...message,\n      created: firebase.database.ServerValue.TIMESTAMP as number,\n    })\n}\n\nexport const SendMessage = (): JSX.Element | null => {\n  const user = useUser()\n  const [typedMessage, setTypedMessage] = React.useState<string>('')\n  if (!user) return null\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTypedMessage(event.target.value)\n  }\n  return (\n    <React.Fragment>\n      <form autoComplete=\"off\">\n        <TextField\n          value={typedMessage}\n          onChange={handleChange}\n          disabled={!user}\n          placeholder=\"type your message here\"\n          fullWidth\n        />\n      </form>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        endIcon={<SendIcon>send</SendIcon>}\n        onClick={() => {\n          sendMessage({\n            message: typedMessage,\n            name: user.displayName || undefined,\n            image: user.avatar || undefined,\n          })\n        }}\n      >\n        Send\n      </Button>\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { ButtonGroup, Button } from '@material-ui/core'\nimport { PlaySound, SoundCommandKey, soundCommandLabelMap } from './PlaySound'\nimport { sendMessage } from './SendMessage'\nimport { useUser } from './UserProvider'\n\nexport const SendSound = (): JSX.Element | null => {\n  const [sound, setSound] = React.useState<string | undefined>(undefined)\n  const [playing, setPlaying] = React.useState<boolean>(false)\n  const [delayTimer, setDelayTimer] = React.useState<number>(0)\n  const user = useUser()\n  const delayInMsec = 500\n  if (!user) return null\n  const playSoundButton = (command: string, label: string) => {\n    return (\n      <Button\n        key={label}\n        onClick={() => {\n          setPlaying(false)\n          sendMessage({\n            message: `[[${command}]]`,\n            name: user.displayName || undefined,\n            image: user.avatar || undefined,\n          })\n        }}\n        onMouseEnter={() => {\n          window.clearTimeout(delayTimer)\n          const timerId = window.setTimeout(() => {\n            setSound(`[[${command}]]`)\n            setPlaying(true)\n            setDelayTimer(0)\n          }, delayInMsec)\n          setDelayTimer(timerId)\n        }}\n        onMouseLeave={() => {\n          if (delayTimer > 0) {\n            window.clearTimeout(delayTimer)\n            setDelayTimer(0)\n          }\n          setSound(undefined)\n          setPlaying(false)\n        }}\n      >\n        {label}\n      </Button>\n    )\n  }\n  return (\n    <React.Fragment>\n      {/* for preview of sound */}\n      <PlaySound\n        command={sound}\n        status={playing ? 'PLAYING' : 'STOPPED'}\n        onFinishedPlaying={() => {\n          setPlaying(false)\n        }}\n      />\n      <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n        {(Object.keys(soundCommandLabelMap) as Array<\n          keyof typeof soundCommandLabelMap\n        >).map((k: SoundCommandKey) => {\n          return playSoundButton(k, soundCommandLabelMap[k] as string)\n        })}\n      </ButtonGroup>\n    </React.Fragment>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { SignIn } from './SignIn'\nimport { Messages } from './Messages'\nimport firebase from './firebase'\nimport './App.css'\nimport { User, UserContext } from './UserProvider'\nimport { TMessage } from './Message'\nimport { SendMessage } from './SendMessage'\nimport { PlaySound } from './PlaySound'\nimport { SendSound } from './SendSound'\n\nfunction App(): JSX.Element {\n  const [user, setUser] = useState<User | undefined>(undefined)\n  const [messages, setMessages] = useState<TMessage[]>([])\n  const [latestMessage, setLatestMessage] = useState<string | undefined>()\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      // ログイン状態ならuserが取得できる\n      console.warn(user)\n      if (!user) {\n        return\n      }\n      setUser({\n        email: user.email,\n        avatar: user.photoURL,\n        displayName: user.displayName,\n      })\n    })\n  }, [])\n\n  useEffect(() => {\n    if (!user) return\n    let latestCreated = 0\n    firebase\n      .database()\n      .ref('message')\n      // すでに投稿済みのメッセージを取得\n      .limitToLast(10)\n      .once('value', (snap) => {\n        console.log('inside once callback with limited 10')\n        const messages = snap.val()\n        if (messages !== null) {\n          console.log(messages)\n          Object.keys(messages).forEach((k: string) => {\n            const message = messages[k]\n            const m: TMessage = {\n              key: k,\n              name: message.name,\n              image: message.image,\n              message: message.message,\n              created: message.created,\n            }\n            setMessages((currentMessages) => [...currentMessages, m])\n            latestCreated =\n              latestCreated === null || latestCreated < m.created\n                ? m.created\n                : latestCreated\n          })\n        }\n        // 新規投稿分を取得\n        snap.ref\n          .orderByChild('created')\n          .startAt(latestCreated + 1)\n          .on('child_added', (snap) => {\n            const message = snap.val()\n            const m: TMessage = {\n              key: snap.key!,\n              name: message.name,\n              image: message.image,\n              message: message.message,\n              created: message.created,\n            }\n            setMessages((currentMessages) => [...currentMessages, m])\n            console.log(message.message)\n            setLatestMessage(message.message)\n          })\n      })\n  }, [user])\n  return (\n    <UserContext.Provider value={user}>\n      <div className=\"App\">\n        <SignIn />\n        {user && (\n          <React.Fragment>\n            <Messages messages={messages} />\n            <SendSound />\n            <SendMessage />\n            <PlaySound command={latestMessage} />\n          </React.Fragment>\n        )}\n      </div>\n    </UserContext.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/拍手と歓声.dfc91a3d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/mens-ou1.325c5d7b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/イエーイ.ba4350c3.mp3\";","module.exports = __webpack_public_path__ + \"static/media/俺の話を聞け.bcb20230.mp3\";","module.exports = __webpack_public_path__ + \"static/media/いま何時？.337a27c5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/ドラ.71d29c0d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/ガッツだぜ.199d7110.mp3\";","module.exports = __webpack_public_path__ + \"static/media/残念.6940c363.mp3\";"],"sourceRoot":""}